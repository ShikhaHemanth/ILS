<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Counselor Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <style>
    /* ---------- Global Style (mirrors student dashboard) ---------- */
    body{
      background-color:#f8f9fa;
      height:100vh;
      margin:0;
      display:flex;
      flex-direction:column;
    }
    .dashboard{
      background:white;
      width:100%;
      height:100%;
      box-shadow:0 4px 10px rgba(0,0,0,.1);
      display:flex;
      flex-direction:column;
    }

    /* ---------- Header ---------- */
    .header{
      display:flex;
      justify-content:space-between;
      align-items:center;
      background:#a7c7e7; /* same blue strip */
      height:60px;
      padding:0 12px;
      border-radius:8px;
      font-size:20px;
    }
    .header img{
      height:100%;
    }

    /* nav links (styled like subject cards header) */
    .nav-links{
      display:flex;
      gap:40px;
    }
    .nav-links div{
      padding:8px 18px;
      border-radius:8px;
      font-weight:bold;
      cursor:pointer;
      transition:background .3s;
    }
    .nav-links div:hover{background:#dbeafe;}
    .nav-links .active{background:#bfd6ed;}

    /* ---------- Main Content Layout ---------- */
    .content{
      display:flex;
      justify-content:space-between;
      margin-top:20px;
      gap:30px;
    }

    /* ---------- Left side (sections list) ---------- */
    .left-section{
      flex:1;
      padding-left:30px;
      padding-top:20px;
      font-size:24px;
    }
    .section-title{
      font-size:28px;
      font-style:italic;
      margin-bottom:10px;
    }
    .sections-label{
      font-size:22px;
      font-weight:bold;
      color:red;
    }

    /* subject‚Äëcard‚Äëlike boxes for sections */
    .section-card{
      width:180px;
      height:190px;
      background:#F0F9FF;
      border-radius:15px;
      box-shadow:2px 2px 10px rgba(0,0,0,0.1);
      display:flex;
      align-items:center;
      justify-content:center;
      text-align:center;
      padding:10px;
      margin:10px;
      transition:transform .3s, box-shadow .3s, background .3s;
    }
    .section-card:hover{
      transform:scale(1.05);
      box-shadow:4px 4px 15px rgba(0,0,0,0.2);
      background:#DBEAFE;
    }
    .section-card a{
      text-decoration:none;
      color:#1E40AF;
      font-weight:bold;
      font-size:18px;
    }

    /* wrap cards like student subject list */
    .section-card-list{
      list-style:none;
      display:flex;
      flex-wrap:wrap;
      padding:0;
      gap:20px;
    }

    /* ---------- Right side reminder checklist ---------- */
    .reminder-box{
      background:#fff3cd;
      border:1px solid #ffeeba;
      padding:20px;
      border-radius:8px;
      width:350px;
      margin-right:30px;
      height:fit-content;
      box-shadow:2px 2px 10px rgba(0,0,0,.05);
    }
    .reminder-box h5{
      font-weight:bold;
    }
    .form-check label{
      font-size:16px;
    }
    #chat-launcher {
    position: fixed;
    bottom: 30px;
    right: 10%;
    cursor: pointer;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: white;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
}

#chat-launcher:hover {
    box-shadow: 0 8px 16px rgba(28, 28, 28, 0.3);
    background-color: #f9f9f9;
    transform: scale(1.1);
    transition: box-shadow 0.3s ease, background-color 1s ease;
}

.material-icons {
    background: transparent;
    border: none;
    font-size: 40px;
    color: #DE6013;
    cursor: pointer;
}

#chat-modal {
    display: none; 
    position: fixed; 
    bottom: 80px; 
    right: 20px; 
    width: 350px; 
    height: 500px; 
    background: #fff; 
    border: 1px solid #ccc; 
    border-radius: 10px; 
    box-shadow: 0 0 10px rgba(0,0,0,0.2); 
    z-index: 1000;
}
.chat-tab {
    flex: 1; 
    padding: 10px; 
    border: none; 
    background: #f1f1f1;
}
#chat-contacts {
    height: 100px; 
    overflow-y: auto; 
    padding: 10px;
}
#chat-box {
    height: 300px; 
    overflow-y: auto; 
    padding: 10px; 
    border-top: 1px solid #eee; 
    border-bottom: 1px solid #eee;
}
#chat-form {
    display: flex; 
    padding: 10px;
}
#chat-input {
    flex: 1; 
    padding: 5px;
}
#chat-modal.show {
    display: block;
}
  </style>
</head>
<body>
  <div class="dashboard container-fluid">
    <!-- ---------- Header ---------- -->
    <div class="header">
      <img src="/graphics/Logo.png" alt="Website Logo" />
      <p class="fw-bold">Counselor Dashboard</p>
      <!-- <div class="nav-links">
        <div id="my-sections" class="active">Chat</div>
        <div id="uploads">Uploads</div>
        <div id="reminders">Work To Do</div>
      </div> -->

      <div class="dropdown">
        <button class="btn btn-light dropdown-toggle" type="button" id="settingsDropdown" data-bs-toggle="dropdown" aria-expanded="false">‚öôÔ∏è</button>
        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="settingsDropdown">
          <li><a class="dropdown-item" href="#" id="logout">Logout</a></li>
        </ul>
      </div>
    </div>

    <!-- ---------- Main Content ---------- -->
    <div class="content">
      <!-- Left Section Cards -->
      <div class="left-section">
        <h2 class="section-title">Welcome, Counselor, <%= counselorName %>!</h2>
        <p class="sections-label">YOUR STUDENTS</p>

        <% if (students.length === 0) { %>
          <p>No students assigned to you yet.</p>
      <% } else { %>
          <ul class="section-card-list">
              <% students.forEach(student => { %>
                  <li>
                      <div class="section-card">
                          <a href="/counselor_dashboard/student_info/<%= student.studentID %>"><%= student.name %></a>
                      </div>
                  </li>
              <% }) %>
          </ul>
      <% } %>
      </div>

      <!-- Reminder Checklist -->
      <div class="reminder-box">
        <h5>üìå Reminder Checklist</h5>
        <div class="form-check"><input class="form-check-input" type="checkbox" id="reminder1"><label class="form-check-label" for="reminder1">Review student progress</label></div>
        <div class="form-check"><input class="form-check-input" type="checkbox" id="reminder2"><label class="form-check-label" for="reminder2">Upload student progress report</label></div>
        <div class="form-check"><input class="form-check-input" type="checkbox" id="reminder3"><label class="form-check-label" for="reminder3">Schedule parent meeting</label></div>
      </div>
      <div id="chat-launcher">
        <span class="material-icons">forum</span>
      </div>
      <div id="chat-modal">
          <div style="display: flex; border-bottom: 1px solid #ccc;">
              <button id="tab-teacher" class="chat-tab">Teachers</button>
              <button id="tab-counselor" class="chat-tab">Counselor</button>
              <button id="close-chat" class="material-icons" style="font-size: 20px; ">close</button>
          </div>
          <div id="chat-contacts"></div>
          <div id="chat-box" data-receiver-id="123" data-receiver-role="teacher"></div>
          <form id="chat-form">
              <input type="text" id="chat-input" placeholder="Type a message..." />
              <button type="submit" style="padding: 5px 10px;" id="sendButton">Send</button>
          </form>
      </div>
    </div>
  </div>

  <!-- ---------- Scripts ---------- -->
  <script>
    document.getElementById("logout").addEventListener("click",()=>{localStorage.removeItem("token");window.location.href="/login"});
    document.addEventListener("DOMContentLoaded", function() {
      const chatIcon = document.getElementById("chat-launcher");
      const chatModal = document.getElementById("chat-modal");
      const closeChat = document.getElementById("close-chat");

      // Local Storage setup (students instead of teachers)
      localStorage.setItem('students', '<%- JSON.stringify(students) %>'); 
      const studentContacts = JSON.parse(localStorage.getItem('students'));
      const senderId = localStorage.getItem('userID');

      chatIcon.addEventListener("click", () => {
          chatModal.classList.toggle("show");
          loadContacts(); // Load students by default
      });

      closeChat.addEventListener("click", () => {
          chatModal.style.display = "none";
      });

      function loadContacts() {
          const contacts = studentContacts;
          const container = document.getElementById("chat-contacts");

          container.innerHTML = ""; // Clear previous list

          contacts.forEach(contact => {
              const button = document.createElement("button");
              button.textContent = contact.studentName;  // Assuming you send studentName
              button.classList.add("contact-button");
              button.style.display = "block";
              button.style.marginBottom = "5px";
              button.style.padding = "8px";
              button.style.borderRadius = "5px";
              button.style.border = "1px solid #ccc";
              button.style.backgroundColor = "#f9f9f9";
              button.style.cursor = "pointer";

              button.addEventListener("click", () => {
                  openChat(contact);
              });

              container.appendChild(button);
          });
      }

      function openChat(contact) {
          const chatBox = document.getElementById("chat-box");
          const contactName = contact.studentName;

          chatBox.innerHTML = `
              <div style="margin-bottom: 10px; font-weight: bold;">
                  Chat with ${contactName}
              </div>
              <div id="chat-messages" style="height: 250px; overflow-y: auto; border: 1px solid #ddd; padding: 5px; margin-bottom: 10px;"></div>
          `;

          chatBox.dataset.receiverId = contact.userID; // **important** should match DB userID
          loadPreviousMessages(contact.userID);
      }

      async function loadPreviousMessages(receiverId) {
          try {
              const senderId = localStorage.getItem('userID');
              const response = await fetch('/getPreviousMessages', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                      senderId: senderId,
                      receiverId: receiverId
                  })
              });

              const messages = await response.json();
              const chatMessages = document.getElementById("chat-messages");
              chatMessages.innerHTML = "";

              messages.forEach(msg => {
                  const msgElement = document.createElement("div");
                  const isFromYou = msg.senderId == senderId;
                  msgElement.textContent = `${isFromYou ? 'You' : 'Them'}: ${msg.content}`;
                  chatMessages.appendChild(msgElement);
              });
          } catch (error) {
              console.error('Error loading messages:', error);
          }
      }

      const socket = io();
      const sendButton = document.getElementById("sendButton");
      const messageInput = document.getElementById("chat-input");

      sendButton.addEventListener("click", (e) => {
          e.preventDefault(); // Prevent page refresh
          const message = messageInput.value.trim();
          if (message !== "") {
              const chatBox = document.getElementById("chat-box");
              const receiverId = chatBox.dataset.receiverId;

              const messageData = {
                  senderId,
                  receiverId,
                  content: message
              };

              socket.emit("send_message", messageData);
              messageInput.value = "";
          }
      });

      socket.on("receive_message", (data) => {
          const chatMessages = document.getElementById("chat-messages");
          const msgElement = document.createElement("div");

          msgElement.textContent = `${data.senderId == senderId ? 'You' : 'Them'}: ${data.content}`;
          chatMessages.appendChild(msgElement);
          chatMessages.scrollTop = chatMessages.scrollHeight;
      });
    });
  </script>
</body>
</html>

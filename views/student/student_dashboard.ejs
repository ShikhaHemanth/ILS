<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <!-- Bootstrap Bundle (includes Popper.js) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="/student/css/dashboard.css">
    <link rel="stylesheet" href="/student/css/header.css">

    <style>
        #progress-bar {
            height: 100%;
            width: <%= totalAssignments > 0 ? (completedAssignments / totalAssignments) * 100 : 0 %>%; 
        }
    </style>

</head>
<body>
    <div class="header">
        <img src="/graphics/Logo.png" alt="Website Logo">
        <p class="fw-bold">Student Dashboard</p>
        <!-- Settings Dropdown -->
        <div class="dropdown">
            <button class="btn btn-light dropdown-toggle" type="button" id="settingsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                ‚öôÔ∏è
            </button>
            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="settingsDropdown">
                <li><a class="dropdown-item" href="#" id="logout">Logout</a></li>
            </ul>
        </div>
    </div>

    <div class="content">
        <div class="left-section">
            <div class="d-flex align-items-center">
                <div style="font-style: oblique;">
                    <p class="ms-3 fw-bold" style="font-size: 22px;">üëã Hi <%= student.name %>! Ready to learn and earn stars today?</p>
                </div>
            </div>

            <!-- Progress Bar Section -->
            <div class="progress mt-3">
                <div id="progress-bar" class="progress-bar bg-success animated-bar" role="progressbar"
                        aria-valuenow="<%= totalAssignments > 0 ? (completedAssignments / totalAssignments) * 100 : 0 %>"
                        aria-valuemin="0" 
                        aria-valuemax="100">
                    <%= totalAssignments > 0 ? Math.round((completedAssignments / totalAssignments) * 100) : 0 %>%
                </div>
            </div>
            <div class="fun-character" id="fun-character"></div>

            <div class="prize-text">
                <% if ((completedAssignments/ totalAssignments)==1) { %>
                    <div id="congrats-popup">
                        üéâ Yay! You've finished all assignments! Treat yourself to a new video! üéÅ
                    </div>
                <% } else { %>
                    <div class="goal-text">
                        üåü You're <%= Math.round((completedAssignments / totalAssignments) * 100) %>% done! Keep going!
                    </div>
                    <div class="prize-text">üåü Complete all your assignments to win a special prize! üéÅ</div>
                <% } %>
                </div>

            <div style="padding-top: 15px; font-size: 30px;">
                <p class="mt-3 fw-bold">SUBJECTS</p>
            </div>

            <div class="subjects">
                <% if (subjects.length > 0) { %>
                    <ul class="subject-cards">
                        <% subjects.forEach(subject => { %>
                            <li>
                            <a href="/student_dashboard/<%= subject.subjectName.toLowerCase() %>">
                                <div class="subject-card">
                                <img src="/graphics/<%= subject.subjectName.toLowerCase() %>.jpg" alt="<%= subject.subjectName %>">
                                <span><%= subject.subjectName %></span>
                                </div>
                            </a>
                            </li>
                        <% }) %>
                    </ul>
                <% } else { %>
                    <p>No academic subjects assigned.</p>
                <% } %>
            </div>
        </div>

        <div class="right-column">
            <div class="task-card">
                <div style="font-size: 25px;">
                    <p class="mb-0 fw-bold">üß† Task List</p>
                </div>
                <%
                    const today = new Date();
                    const futureAssignments = assignments.filter(a => new Date(a.duedate) > today);
        
                    if (futureAssignments.length > 0) {
                        futureAssignments.forEach(task => {
                            const isCompleted = task.completed === 1;
                %>
                <div>
                    <a href="/student_dashboard/<%= task.subjectName %>/<%= task.assignmentId %>" 
                        class="<%= task.completed === 1 ? 'completed-task' : 'incomplete-task' %>">
                        <%= task.subjectName %>: <%= task.title %>
                    </a>
                    </div>
                <% 
                        });
                    } else { 
                %>
                    <div><p>No upcoming assignments üéâ</p></div>
                <% } %>
            </div>

            <div id="mood-checkin" style="margin-top: 30px;"> 
                <h3>How are you feeling today?</h3>
                <div id="emoji-list" style="display: flex; gap: 10px;">
                    <span class="emoji <%= currentMood === 'happy' ? 'selected' : '' %>" data-mood="happy" title="Happy">üòä</span>
                    <span class="emoji <%= currentMood === 'tired' ? 'selected' : '' %>" data-mood="tired" title="Tired">üò¥</span>
                    <span class="emoji <%= currentMood === 'frustrated' ? 'selected' : '' %>" data-mood="frustrated" title="Frustrated">üò§</span>
                    <span class="emoji <%= currentMood === 'sad' ? 'selected' : '' %>" data-mood="sad" title="Sad">üò¢</span>
                    <span class="emoji <%= currentMood === 'excited' ? 'selected' : '' %>" data-mood="excited" title="Excited">ü§©</span>
                </div>
            </div>
        </div>
    </div>

    <div id="chat-launcher">
        <span class="material-icons">forum</span>
    </div>
    <div id="chat-modal">
        <div style="display: flex; border-bottom: 1px solid #ccc;">
            <button id="tab-teacher" class="chat-tab">Teachers</button>
            <button id="tab-counselor" class="chat-tab">Counselor</button>
            <button id="close-chat" class="material-icons" style="font-size: 20px; ">close</button>
        </div>
        <div id="chat-contacts"></div>
        <div id="chat-box" data-receiver-id="123" data-receiver-role="teacher"></div>
        <form id="chat-form">
            <input type="text" id="chat-input" placeholder="Type a message..." />
            <button type="submit" style="padding: 5px 10px;" id="sendButton">Send</button>
        </form>
    </div>

    <script>
        document.getElementById("logout").addEventListener("click", function() {
            localStorage.removeItem('token'); // Remove the token
            window.location.href = "/login";  // Redirect to login page
        });
        // Function to handle the pageshow event
        function handlePageShow(event) {
            if (event.persisted) {
                // If the page is shown from the cache (e.g., when navigating back),
                // check if the token is still in local storage
                checkTokenLocalStorage();
        }}
        function checkTokenLocalStorage() {
            if (!localStorage.getItem('token')) {
                // Redirect to login page if token doesn't exist in localStorage
                window.location.href = '/login';
            }
        }
        // Add event listener for the pageshow event
        window.addEventListener('pageshow', handlePageShow);

        localStorage.setItem('userID', "<%= userID %>")
        let selectedMood = null;

        document.querySelectorAll('.emoji').forEach(emoji => {
            emoji.addEventListener('click', () => {
                document.querySelectorAll('.emoji').forEach(e => e.classList.remove('selected'));
                emoji.classList.add('selected');
                selectedMood = emoji.getAttribute('data-mood');
            });
        });

        window.addEventListener('beforeunload', async (event) => {
            if (selectedMood) {
                navigator.sendBeacon('/student/savemood', new Blob([JSON.stringify({ mood: selectedMood })], {
                    type: 'application/json'
                }));
            }
        });

        document.addEventListener("DOMContentLoaded", function() {
            const chatIcon = document.getElementById("chat-launcher");
            const chatModal = document.getElementById("chat-modal");
            const closeChat = document.getElementById("close-chat");

            localStorage.setItem('teachers', '<%- JSON.stringify(teachers) %>');
            localStorage.setItem('counselor', '<%- JSON.stringify(counselor) %>');
            const teacherContacts = JSON.parse(localStorage.getItem('teachers'));
            const counselorContacts = JSON.parse(localStorage.getItem('counselor'));
            const senderId = localStorage.getItem('userID');

            chatIcon.addEventListener("click", () => {
                chatModal.classList.toggle("show");
                loadContacts("teacher"); // default to teacher
                setActiveTab("tab-teacher");
            });

            closeChat.addEventListener("click", () => {
                chatModal.style.display = "none";
            });

            document.getElementById("tab-teacher").addEventListener("click", () => {
                loadContacts("teacher");
                setActiveTab("tab-teacher");
            });

            document.getElementById("tab-counselor").addEventListener("click", () => {
                loadContacts("counselor");
                setActiveTab("tab-counselor");
            });

            function setActiveTab(tabId) {
                document.querySelectorAll(".chat-tab").forEach(tab => tab.style.background = "#f1f1f1");
                document.getElementById(tabId).style.background = "#fff";
            }

            function loadContacts(type) {
                const contacts = type === "teacher" ? teacherContacts : counselorContacts;
                const container = document.getElementById("chat-contacts");

                container.innerHTML = ""; // Clear previous list

                contacts.forEach(contact => {
                    const button = document.createElement("button");
                    button.textContent = contact.teacherName || contact.counselorName;
                    button.classList.add("contact-button");
                    button.style.display = "block";
                    button.style.marginBottom = "5px";
                    button.style.padding = "8px";
                    button.style.borderRadius = "5px";
                    button.style.border = "1px solid #ccc";
                    button.style.backgroundColor = "#f9f9f9";
                    button.style.cursor = "pointer";

                    button.addEventListener("click", () => {
                        openChat(contact, type);
                    });

                    container.appendChild(button);
                });
            }
            

            function openChat(contact, type) {
                const chatBox = document.getElementById("chat-box");
                const contactName = contact.teacherName || contact.counselorName;

                chatBox.innerHTML = `
                    <div style="margin-bottom: 10px; font-weight: bold;">
                        Chat with ${contactName}
                    </div>
                    <div id="chat-messages" style="height: 250px; overflow-y: auto; border: 1px solid #ddd; padding: 5px; margin-bottom: 10px;"></div>
                `;

                chatBox.dataset.receiverId = contact.userid;
                chatBox.dataset.receiverRole = type;

                // Call function to load previous messages
                loadPreviousMessages(contact.userid, type);
            }

            async function loadPreviousMessages(receiverId, receiverRole) {
                try {
                    const senderId = localStorage.getItem('userID');
                    const response = await fetch('/getPreviousMessages', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            senderId:senderId,
                            receiverId: receiverId
                        })
                    });

                    const messages = await response.json();
                    const chatMessages = document.getElementById("chat-messages");
                    // Clear existing messages if any
                    chatMessages.innerHTML = "";
                    // Display each message
                    messages.forEach(msg => {
                        const msgElement = document.createElement("div");
                        const isFromYou = msg.senderId == senderId;
                        msgElement.textContent = `${isFromYou ? 'You' : 'Them'}: ${msg.content}`;
                        chatMessages.appendChild(msgElement);
                    });
                } catch (error) {
                    console.error('Error loading messages:', error);
                }
            }

            const socket = io();
            const sendButton = document.getElementById("sendButton");
            const messageInput = document.getElementById("chat-input");

            sendButton.addEventListener("click", (e) => {
                e.preventDefault(); // Prevent form submission
                const message = messageInput.value.trim();
                if (message !== "") {
                    const chatBox = document.getElementById("chat-box");
                    const receiverId = chatBox.dataset.receiverId;
                    const receiverRole = chatBox.dataset.receiverRole;

                    const messageData = {
                        senderId,
                        receiverId,
                        receiverRole, // optional, in case you want it for routing
                        content: message
                    };

                    socket.emit("send_message", messageData);
                    messageInput.value = "";
                }
            });

            socket.on("receive_message", (data) => {
                const chatBox = document.getElementById("chat-messages");
                const msgElement = document.createElement("div");

                // Append received message to chat window
                msgElement.textContent = `${data.senderId === senderId ? 'You' : 'Them'}: ${data.content}`;
                chatBox.appendChild(msgElement);

                // Scroll to the latest message
                chatBox.scrollTop = chatBox.scrollHeight;
            });
        });


    // Chatbase based chatbot

    //     (function () {
    //     if (!window.chatbase || window.chatbase("getState") !== "initialized") {
    //         window.chatbase = (...arguments) => {
    //             if (!window.chatbase.q) {
    //                 window.chatbase.q = [];
    //             }
    //             window.chatbase.q.push(arguments);
    //         };
    //         window.chatbase = new Proxy(window.chatbase, {
    //             get(target, prop) {
    //                 if (prop === "q") {
    //                     return target.q;
    //                 }
    //                 return (...args) => target(prop, ...args);
    //             }
    //         });
    //     }
    //     const onLoad = function () {
    //         const script = document.createElement("script");
    //         script.src = "https://www.chatbase.co/embed.min.js";
    //         script.id = "qLYGNFlA9LRx8m9Y4vD76";
    //         script.domain = "www.chatbase.co";
    //         document.body.appendChild(script);
    //     };
    //     if (document.readyState === "complete") {
    //         onLoad();
    //     } else {
    //         window.addEventListener("load", onLoad);
    //     }
    // })();

    </script>

    <script src="https://cdn.botpress.cloud/webchat/v2.3/inject.js"></script>
    <script src="https://files.bpcontent.cloud/2025/03/09/15/20250309154125-ROQMQ6F2.js"></script>

    <script src="/socket.io/socket.io.js"></script>

</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Student Information Page For Teacher</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <link rel="stylesheet" href="/student/css/header.css">
  <script src="/socket.io/socket.io.js"></script>
  <style>
    body {
      background-color: #f8f9fa;
      height: 100vh;
      margin: 0;
      display: flex;
      flex-direction: column;
    }
    .content {
      display: flex;
      justify-content: space-between;
      margin-top: 20px;
      gap: 30px;
    }
    .left-section {
      flex: 1;
      padding-left: 30px;
      padding-top: 20px;
      font-size: 24px;
    }
    .section-title {
      font-size: 28px;
      font-style: italic;
      margin-bottom: 10px;
    }
    .sections-label {
      font-size: 22px;
      font-weight: bold;
      color: red;
    }
    .section-card {
      width: 180px;
      height: 190px;
      background: #F0F9FF;
      border-radius: 15px;
      box-shadow: 2px 2px 10px rgba(0,0,0,0.1);
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;
      padding: 10px;
      margin: 10px;
      transition: transform .3s, box-shadow .3s, background .3s;
    }
    .section-card:hover {
      transform: scale(1.05);
      box-shadow: 4px 4px 15px rgba(0,0,0,0.2);
      background: #DBEAFE;
    }
    .section-card a {
      text-decoration: none;
      color: #1E40AF;
      font-weight: bold;
      font-size: 18px;
    }
    .section-card-list {
      list-style: none;
      display: flex;
      flex-wrap: wrap;
      padding: 0;
      gap: 20px;
    }
    .reminder-box {
      background: #fff3cd;
      border: 1px solid #ffeeba;
      padding: 20px;
      border-radius: 8px;
      width: 350px;
      margin-right: 30px;
      height: fit-content;
      box-shadow: 2px 2px 10px rgba(0,0,0,.05);
    }
    .reminder-box h5 {
      font-weight: bold;
    }
    .form-check label {
      font-size: 16px;
    }

    /* ---------- Assignment List ---------- */
    .submitted-assignments {
      margin-top: 30px;
    }
    .submitted-assignments h5 {
      font-size: 22px;
      font-weight: bold;
      margin-bottom: 15px;
    }
    .assignment-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: #E0F2FE;
      padding: 10px 15px;
      margin-bottom: 10px;
      border-radius: 10px;
      box-shadow: 1px 1px 6px rgba(0,0,0,0.1);
    }
    .assignment-item button {
      font-size: 14px;
    }

    /* Bottom buttons */
    .bottom-buttons {
      margin-top: 30px;
      display: flex;
      gap: 20px;
    }
    
    #chat-launcher {
        position: fixed;
        bottom: 30px;
        right: 10%;
        cursor: pointer;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: white;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

    #chat-launcher:hover {
        box-shadow: 0 8px 16px rgba(28, 28, 28, 0.3);
        background-color: #f9f9f9;
        transform: scale(1.1);
        transition: box-shadow 0.3s ease, background-color 1s ease;
    }

    .material-icons {
        background: transparent;
        border: none;
        font-size: 40px;
        color: #DE6013;
        cursor: pointer;
    }

    #chat-modal {
        display: none; 
        position: fixed; 
        bottom: 80px; 
        right: 20px; 
        width: 350px; 
        height: 500px; 
        background: #fff; 
        border: 1px solid #ccc; 
        border-radius: 10px; 
        box-shadow: 0 0 10px rgba(0,0,0,0.2); 
        z-index: 1000;
    }
    .chat-tab {
        flex: 1; 
        padding: 10px; 
        border: none; 
        background: #f1f1f1;
    }
    #chat-contacts {
        height: 100px; 
        overflow-y: auto; 
        padding: 10px;
    }
    #chat-box {
        height: 300px; 
        overflow-y: auto; 
        padding: 10px; 
        border-top: 1px solid #eee; 
        border-bottom: 1px solid #eee;
    }
    #chat-form {
        display: flex; 
        padding: 10px;
    }
    #chat-input {
        flex: 1; 
        padding: 5px;
    }
    #chat-modal.show {
        display: block;
    }
    #chat-messages {
      display: flex;
      flex-direction: column;
    }
  </style>
</head>
<body>
  <div class="dashboard container-fluid">
    <!-- Header -->
    <div class="header">
      <button class="btn btn-light" id="back">&#8592;</button>
      <div class="nav-links">
        <div id="my-sections" class="active">Student Status</div>
        <div id="uploads">Uploads</div>
        <div id="reminders">Learning plan</div>
      </div>
      <div class="dropdown">
        <button class="btn btn-light dropdown-toggle" type="button" id="settingsDropdown" data-bs-toggle="dropdown" aria-expanded="false">‚öôÔ∏è</button>
        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="settingsDropdown">
          <li><a class="dropdown-item" href="#" id="logout">Logout</a></li>
        </ul>
      </div>
    </div>

    <!-- Content -->
    <div class="content">
      <!-- Left Section -->
      <div class="left-section">
        <p class="sections-label">Student: <%= student.name %></p>
        <!-- Submitted Assignments Section -->
        <div class="submitted-assignments">
          <h5>üìÑ Completed Assignments</h5>
          <% if (completedAssignments && completedAssignments.length > 0) { %>
              <% completedAssignments.forEach(function(assignment) { %>
                  <div class="assignment-item">
                      <span><%= assignment.title %></span>
                  </div>
              <% }); %>
          <% } else { %>
              <div class="assignment-item">
                  <span>No assignments completed yet.</span>
              </div>
          <% } %>
        </div>
        <div class="submitted-assignments">
          <h5>üìÑ Yet to Complete</h5>
          <% if (yetToCompleteAssignments && yetToCompleteAssignments.length > 0) { %>
              <% yetToCompleteAssignments.forEach(function(assignment) { %>
                  <div class="assignment-item">
                      <span><%= assignment.title %></span>
                  </div>
              <% }); %>
          <% } else { %>
              <div class="assignment-item">
                  <span>All assignments are completed!</span>
              </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>

  <div id="chat-launcher">
    <span class="material-icons">forum</span>
  </div>
  <div id="chat-modal">
    <div style="display: flex; border-bottom: 1px solid #ccc;">
        <button id="tab-student" class="chat-tab">Student</button>
        <button id="tab-counselor" class="chat-tab">Counselor</button>
        <button id="close-chat" class="material-icons" style="font-size: 20px; ">close</button>
    </div>
    <div id="chat-contacts"></div>
    <div id="chat-box" data-receiver-id="123" data-receiver-role="student"></div>
    <form id="chat-form">
        <input type="text" id="chat-input" placeholder="Type a message..." />
        <button type="submit" style="padding: 5px 10px;" id="sendButton">Send</button>
    </form>
  </div>

  <!-- Scripts -->
  <script>
    localStorage.setItem("userID", "<%= userId %>")
    document.addEventListener("DOMContentLoaded", function() {
        const chatIcon = document.getElementById("chat-launcher");
        const chatModal = document.getElementById("chat-modal");
        const closeChat = document.getElementById("close-chat");

        localStorage.setItem('student', '<%- JSON.stringify(student) %>');
        localStorage.setItem('counselor', '<%- JSON.stringify(counselor) %>');
        const studentContact = JSON.parse(localStorage.getItem('student'));
        const counselorContact = JSON.parse(localStorage.getItem('counselor'));
        const senderId = localStorage.getItem('userID');

        chatIcon.addEventListener("click", () => {
            chatModal.classList.toggle("show");
            loadContacts("student"); // default to student
            setActiveTab("tab-student");
        });

        closeChat.addEventListener("click", () => {
            chatModal.style.display = "none";
        });

        document.getElementById("tab-student").addEventListener("click", () => {
            loadContacts("student");
            setActiveTab("tab-student");
        });

        document.getElementById("tab-counselor").addEventListener("click", () => {
            loadContacts("counselor");
            setActiveTab("tab-counselor");
        });

        function setActiveTab(tabId) {
            document.querySelectorAll(".chat-tab").forEach(tab => tab.style.background = "#f1f1f1");
            document.getElementById(tabId).style.background = "#fff";
        }

        function loadContacts(type) {
          const contactList = type === "student" ? studentContact : counselorContact;
          const container = document.getElementById("chat-contacts");

          container.innerHTML = ""; // Clear previous list

          // Handle both single object and array
          const contacts = Array.isArray(contactList) ? contactList : [contactList];

          contacts.forEach((contact, index) => {
              const button = document.createElement("button");
              button.textContent = contact.name || contact.counselorName;
              button.classList.add("contact-button");
              button.style.display = "block";
              button.style.marginBottom = "5px";
              button.style.padding = "8px";
              button.style.borderRadius = "5px";
              button.style.border = "1px solid #ccc";
              button.style.backgroundColor = "#f9f9f9";
              button.style.cursor = "pointer";

              button.addEventListener("click", () => {
                  openChat(contact, type);
              });

              container.appendChild(button);

              // Auto-open first contact's chat
              if (index === 0) {
                  openChat(contact, type);
              }
          });
        }
        
        function openChat(contact, type) {
            const chatBox = document.getElementById("chat-box");
            const contactName = contact.name || contact.counselorName;

            chatBox.innerHTML = `
                <div style="margin-bottom: 10px; font-weight: bold;">
                    Chat with ${contactName}
                </div>
                <div id="chat-messages" style="height: 250px; overflow-y: auto; border: 1px solid #ddd; padding: 5px; margin-bottom: 10px;"></div>
            `;

            chatBox.dataset.receiverId = contact.userID || contact.userid;
            chatBox.dataset.receiverRole = type;

            // Call function to load previous messages
            loadPreviousMessages(contact.userID || contact.userid, type);
        }

        async function loadPreviousMessages(receiverId) {
            try {
                const senderId = localStorage.getItem('userID');
                const response = await fetch('/getPreviousMessages', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        senderId:senderId,
                        receiverId: receiverId
                    })
                });

                const messages = await response.json();
                const chatMessages = document.getElementById("chat-messages");
                // Clear existing messages if any
                chatMessages.innerHTML = "";
                // Display each message
                messages.forEach(msg => {
                    const msgElement = document.createElement("div");
                    const isFromYou = msg.senderId == senderId;
                    msgElement.textContent = msg.content;
                    msgElement.style.margin = "5px";
                    msgElement.style.padding = "8px 12px";
                    msgElement.style.borderRadius = "10px";
                    msgElement.style.maxWidth = "70%";
                    msgElement.style.display = "inline-block";

                    if (isFromYou) {
                        msgElement.style.backgroundColor = "#d4f7dc"; // Light green bubble
                        msgElement.style.alignSelf = "flex-end";
                        msgElement.style.textAlign = "right";
                        msgElement.style.marginLeft = "auto";
                    } else {
                        msgElement.style.backgroundColor = "#f1f0f0"; // Gray bubble
                        msgElement.style.alignSelf = "flex-start";
                        msgElement.style.textAlign = "left";
                        msgElement.style.marginRight = "auto";
                    }

                    chatMessages.appendChild(msgElement);
                });
                chatMessages.scrollTop = chatMessages.scrollHeight;
            } catch (error) {
                console.error('Error loading messages:', error);
            }
        }

        const socket = io();
        const sendButton = document.getElementById("sendButton");
        const messageInput = document.getElementById("chat-input");

        sendButton.addEventListener("click", (e) => {
            e.preventDefault(); // Prevent form submission
            const message = messageInput.value.trim();
            if (message !== "") {
                const chatBox = document.getElementById("chat-box");
                const receiverId = chatBox.dataset.receiverId;

                const messageData = {
                    senderId,
                    receiverId,
                    content: message
                };

                socket.emit("send_message", messageData);
                messageInput.value = "";
            }
        });

        socket.on("receive_message", (data) => {
          const chatMessages = document.getElementById("chat-messages");
          const msgElement = document.createElement("div");

          const isFromYou = data.senderId === senderId;
          msgElement.classList.add("message");
          msgElement.style.margin = "5px 0";
          msgElement.style.padding = "8px";
          msgElement.style.borderRadius = "10px";
          msgElement.style.maxWidth = "60%";
          msgElement.style.wordWrap = "break-word";
          msgElement.style.backgroundColor = isFromYou ? "#d4f7dc" : "#f0f0f0"; // green or gray
          msgElement.style.alignSelf = isFromYou ? "flex-end" : "flex-start";
          msgElement.textContent = `${data.content}`;

          chatMessages.appendChild(msgElement);
          chatMessages.scrollTop = chatMessages.scrollHeight;
        });
    });
    document.getElementById("uploads").addEventListener("click", () => window.location.href="/teacher_dashboard/uploads/<%= studentid %>");
    document.getElementById("logout").addEventListener("click", () => {
      localStorage.removeItem("token");
      window.location.href="/login";
    });
    // Event listeners for navigation links
    document.getElementById('my-sections').addEventListener('click', function() {
        showSection('student-status-content');
        setActiveLink('my-sections');
    });

    document.getElementById('uploads').addEventListener('click', function() {
        showSection('uploads-content');
        setActiveLink('uploads');
    });


    // Function to set the active link
    function setActiveLink(activeLinkId) {
        const links = document.querySelectorAll('.nav-links div');
        links.forEach(function(link) {
            link.classList.remove('active'); // Remove active class from all links
        });
        document.getElementById(activeLinkId).classList.add('active'); // Add active class to clicked link
    }
    
    document.getElementById("back").addEventListener("click", function() {
            window.location.href = "/teacher_dashboard";
        });
</script>
</body>
</html>